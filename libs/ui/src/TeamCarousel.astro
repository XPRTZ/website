---
import { type Team } from "@xprtz/cms";
const team = Astro.props as Team;
const site = import.meta.env.PUBLIC_STRAPI_URL;

// Calculate the number of slides needed
const membersPerSlide = 5;
const totalMembers = team.members.length;
const totalSlides = Math.max(1, Math.ceil(totalMembers / membersPerSlide));

// Create an array of members for each slide, ensuring each slide has exactly 5 items
// If the last slide has fewer than 5 items, fill in with items from the beginning
const slidesMembers = Array.from({ length: totalSlides }).map((_, slideIndex) => {
  const startIndex = slideIndex * membersPerSlide;
  const slideMembers = [];

  // Add 5 members to each slide
  for (let i = 0; i < membersPerSlide; i++) {
    // Calculate the actual index, wrapping around to the beginning if needed
    const memberIndex = (startIndex + i) % totalMembers;
    slideMembers.push(team.members[memberIndex]);
  }

  return slideMembers;
});
---

<div class="mx-auto mt-32 max-w-7xl px-6 lg:px-8">
  <div class="mx-auto max-w-2xl lg:mx-0">
    <h2 class="text-pretty text-4xl font-semibold tracking-tight text-primary-800 sm:text-5xl">{team.title}</h2>
    <p class="mt-6 text-lg/8 text-gray-600">{team.description}</p>
  </div>

  <div class="carousel-container mt-20 relative overflow-hidden" aria-roledescription="carousel" aria-label="Team members">
    <div class="carousel-track flex transition-transform duration-500">
      {slidesMembers.map((slideMembers, slideIndex) => (
        <div class="carousel-slide flex-none w-full flex flex-nowrap justify-center gap-2 md:gap-4" role="group" aria-roledescription="slide" aria-label={`Slide ${slideIndex + 1} of ${totalSlides}`}>
          {slideMembers.map(member => (
            <div class="carousel-item text-center px-2">
              <img class="mx-auto size-20 md:size-24 rounded-full" src={`${site}${member.avatar.url}`} alt={member.avatar.alternateText}>
              <h3 class="mt-4 md:mt-6 text-sm md:text-base/7 font-semibold tracking-tight text-primary-800">{member.firstname} {member.lastname}</h3>
              <p class="text-xs md:text-sm/6 text-gray-600">{member.realTitle}</p>
            </div>
          ))}
        </div>
      ))}
    </div>

  </div>
</div>

<style>
  .carousel-container {
    max-width: 100%;
    position: relative;
  }

  .carousel-track {
    display: flex;
    width: 100%;
    transition: transform 0.5s ease-in-out;
  }

  .carousel-slide {
    min-width: 100%;
    display: flex;
    flex-wrap: nowrap;
    overflow-x: hidden;
  }

  .carousel-item {
    transition: opacity 0.3s ease;
    flex-shrink: 0;
    max-width: 100%;
  }

  /* Responsive adjustments for carousel items */
  @media (max-width: 640px) {
    .carousel-item {
      width: 50%; /* 2 items per row on small screens */
    }
  }

  @media (min-width: 641px) and (max-width: 768px) {
    .carousel-item {
      width: 33.333%; /* 3 items per row on medium-small screens */
    }
  }

  @media (min-width: 769px) and (max-width: 1024px) {
    .carousel-item {
      width: 20%; /* 5 items per row on medium screens */
    }
  }

  @media (min-width: 1025px) {
    .carousel-item {
      width: 20%; /* 5 items per row on large screens */
    }
  }

</style>

<script>
  // Initialize carousel functionality
  const initCarousel = () => {
    const track = document.querySelector('.carousel-track');
    const slides = document.querySelectorAll('.carousel-slide');
    const container = document.querySelector('.carousel-container');

    if (!track || !slides.length) return;

    let currentSlide = 0;
    const totalSlides = slides.length;

    // Function to go to a specific slide
    const goToSlide = (index) => {
      if (index < 0) index = totalSlides - 1;
      if (index >= totalSlides) index = 0;

      track.style.transform = `translateX(-${index * 100}%)`;

      // Update ARIA attributes for slides
      slides.forEach((slide, i) => {
        slide.setAttribute('aria-hidden', i === index ? 'false' : 'true');
      });

      currentSlide = index;
    };

    // Initialize first slide
    goToSlide(0);

    // Auto-rotate carousel
    let interval = setInterval(() => {
      goToSlide(currentSlide + 1);
    }, 5000); // Change slide every 5 seconds

    // Function to reset auto-rotation
    const resetAutoRotation = () => {
      clearInterval(interval);
      interval = setInterval(() => {
        goToSlide(currentSlide + 1);
      }, 5000);
    };
  };

  // Run on initial load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCarousel);
  } else {
    initCarousel();
  }

  // Also run when Astro updates the page
  document.addEventListener('astro:page-load', initCarousel);
</script>
