---
import { type Team } from "@xprtz/cms";
const team = Astro.props as Team;
const site = import.meta.env.PUBLIC_STRAPI_URL;

// Calculate the number of slides needed
const membersPerSlide = 5;
const totalMembers = team.members.length;
const totalSlides = Math.max(1, Math.ceil(totalMembers / membersPerSlide));
---

<div class="mx-auto mt-32 max-w-7xl px-6 lg:px-8">
  <div class="mx-auto max-w-2xl lg:mx-0">
    <h2 class="text-pretty text-4xl font-semibold tracking-tight text-primary-800 sm:text-5xl">{team.title}</h2>
    <p class="mt-6 text-lg/8 text-gray-600">{team.description}</p>
  </div>

  <div class="carousel-container mt-20 relative overflow-hidden" aria-roledescription="carousel" aria-label="Team members">
    <div class="carousel-track flex transition-transform duration-500">
      {Array.from({ length: totalSlides }).map((_, slideIndex) => (
        <div class="carousel-slide flex-none w-full flex flex-wrap justify-center gap-4 md:gap-8" role="group" aria-roledescription="slide" aria-label={`Slide ${slideIndex + 1} of ${totalSlides}`}>
          {team.members.slice(slideIndex * membersPerSlide, (slideIndex + 1) * membersPerSlide).map(member => (
            <div class="carousel-item text-center w-1/2 sm:w-1/3 md:w-1/4 lg:w-1/5 px-2">
              <img class="mx-auto size-20 md:size-24 rounded-full" src={`${site}${member.avatar.url}`} alt={member.avatar.alternateText}>
              <h3 class="mt-4 md:mt-6 text-sm md:text-base/7 font-semibold tracking-tight text-primary-800">{member.firstname} {member.lastname}</h3>
              <p class="text-xs md:text-sm/6 text-gray-600">{member.realTitle}</p>
            </div>
          ))}
        </div>
      ))}
    </div>

    <div class="carousel-controls flex justify-between items-center absolute top-1/2 left-0 right-0 -translate-y-1/2 px-2 md:px-4">
      <button class="carousel-prev bg-white/80 hover:bg-white text-primary-800 rounded-full p-2 shadow-md focus:outline-none focus:ring-2 focus:ring-primary-600" aria-label="Previous slide">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
        </svg>
      </button>
      <button class="carousel-next bg-white/80 hover:bg-white text-primary-800 rounded-full p-2 shadow-md focus:outline-none focus:ring-2 focus:ring-primary-600" aria-label="Next slide">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
        </svg>
      </button>
    </div>

    <div class="carousel-indicators flex justify-center mt-6 gap-2" role="tablist" aria-label="Carousel navigation">
      {Array.from({ length: totalSlides }).map((_, index) => (
        <button 
          class="carousel-indicator w-3 h-3 rounded-full bg-gray-300 hover:bg-primary-600 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-600" 
          data-index={index}
          role="tab"
          aria-label={`Go to slide ${index + 1}`}
          aria-selected={index === 0 ? "true" : "false"}
        ></button>
      ))}
    </div>
  </div>
</div>

<style>
  .carousel-container {
    max-width: 100%;
    position: relative;
  }

  .carousel-track {
    display: flex;
    width: 100%;
    transition: transform 0.5s ease-in-out;
  }

  .carousel-slide {
    min-width: 100%;
    display: flex;
    flex-wrap: wrap;
  }

  .carousel-item {
    transition: opacity 0.3s ease;
  }

  .carousel-indicator.active {
    background-color: var(--color-primary-600, #4f46e5);
  }

  .carousel-prev,
  .carousel-next {
    opacity: 0.7;
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .carousel-prev:hover,
  .carousel-next:hover {
    opacity: 1;
    transform: scale(1.1);
  }

  .carousel-prev:focus,
  .carousel-next:focus,
  .carousel-indicator:focus {
    outline: none;
    box-shadow: 0 0 0 2px var(--color-primary-600, #4f46e5);
  }

  /* Hide controls on small screens but show on hover/focus */
  @media (max-width: 640px) {
    .carousel-controls {
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .carousel-container:hover .carousel-controls,
    .carousel-container:focus-within .carousel-controls {
      opacity: 1;
    }
  }
</style>

<script>
  // Initialize carousel functionality
  document.addEventListener('astro:page-load', () => {
    const track = document.querySelector('.carousel-track');
    const indicators = document.querySelectorAll('.carousel-indicator');
    const slides = document.querySelectorAll('.carousel-slide');
    const prevButton = document.querySelector('.carousel-prev');
    const nextButton = document.querySelector('.carousel-next');
    const container = document.querySelector('.carousel-container');

    if (!track || !indicators.length || !slides.length) return;

    let currentSlide = 0;
    const totalSlides = slides.length;

    // Set the first indicator as active
    indicators[0].classList.add('active');

    // Function to go to a specific slide
    const goToSlide = (index) => {
      if (index < 0) index = totalSlides - 1;
      if (index >= totalSlides) index = 0;

      track.style.transform = `translateX(-${index * 100}%)`;

      // Update active indicator
      indicators.forEach((indicator, i) => {
        indicator.classList.toggle('active', i === index);
        indicator.setAttribute('aria-selected', i === index ? 'true' : 'false');
      });

      // Update ARIA attributes for slides
      slides.forEach((slide, i) => {
        slide.setAttribute('aria-hidden', i === index ? 'false' : 'true');
      });

      currentSlide = index;
    };

    // Add click event to indicators
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        resetAutoRotation();
        goToSlide(index);
      });
    });

    // Add click events to prev/next buttons
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        resetAutoRotation();
        goToSlide(currentSlide - 1);
      });
    }

    if (nextButton) {
      nextButton.addEventListener('click', () => {
        resetAutoRotation();
        goToSlide(currentSlide + 1);
      });
    }

    // Add keyboard navigation
    container?.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        resetAutoRotation();
        goToSlide(currentSlide - 1);
      } else if (e.key === 'ArrowRight') {
        resetAutoRotation();
        goToSlide(currentSlide + 1);
      }
    });

    // Auto-rotate carousel
    let interval = setInterval(() => {
      goToSlide(currentSlide + 1);
    }, 5000); // Change slide every 5 seconds

    // Function to reset auto-rotation
    const resetAutoRotation = () => {
      clearInterval(interval);
      interval = setInterval(() => {
        goToSlide(currentSlide + 1);
      }, 5000);
    };

    // Pause auto-rotation when hovering over carousel
    if (container) {
      container.addEventListener('mouseenter', () => {
        clearInterval(interval);
      });

      container.addEventListener('mouseleave', () => {
        interval = setInterval(() => {
          goToSlide(currentSlide + 1);
        }, 5000);
      });

      // Make container focusable for keyboard navigation
      container.setAttribute('tabindex', '0');
    }

    // Initialize first slide's ARIA attributes
    slides.forEach((slide, i) => {
      slide.setAttribute('aria-hidden', i === 0 ? 'false' : 'true');
    });
  });
</script>
