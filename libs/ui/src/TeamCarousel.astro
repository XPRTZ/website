---
import { type Team } from "@xprtz/cms";
import { ChevronLeftIcon, ChevronRightIcon } from "@heroicons/react/20/solid";
const team = Astro.props as Team;
const site = import.meta.env.PUBLIC_IMAGES_URL;
---

<div class="mx-auto mt-32 max-w-7xl px-6 lg:px-8">
  <div class="mx-auto max-w-2xl lg:mx-0">
    <h2
      class="text-pretty text-4xl font-semibold tracking-tight text-primary-800 sm:text-5xl"
    >
      {team.title}
    </h2>
    <p class="mt-6 text-lg/8 text-gray-600">{team.description}</p>
  </div>
  <div
    class="embla mt-20"
    data-embla
    role="region"
    aria-label="Team members carousel"
    aria-roledescription="carousel"
  >
    <div class="embla__viewport">
      <div class="embla__container" role="group">
        {
          team.members.map((member, memberIndex) => (
            <div
              class="embla__slide"
              role="group"
              aria-roledescription="slide"
              aria-label={`Team member ${memberIndex + 1} of ${team.members.length}`}
            >
              <div class="team-member text-center px-2">
                <img
                  class="mx-auto size-20 md:size-24 rounded-full"
                  src={`${site}${member.avatar.url}`}
                  alt={member.avatar.alternateText}
                />
                <h3 class="mt-4 md:mt-6 text-sm md:text-base/7 font-semibold tracking-tight text-primary-800">
                  {member.firstname} {member.lastname}
                </h3>
                <p class="text-xs md:text-sm/6 text-gray-600 pl-4 pr-4">
                  {member.realTitle}
                </p>
              </div>
            </div>
          ))
        }
      </div>
    </div>
    <div class="embla__controls">
      <div class="embla__buttons">
        <button
          class="embla__button embla__button--prev"
          type="button"
          aria-label="Previous team member"
        >
          <ChevronLeftIcon className="embla__button__icon" />
        </button>
        <button
          class="embla__button embla__button--next"
          type="button"
          aria-label="Next team member"
        >
          <ChevronRightIcon className="embla__button__icon" />
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .embla {
    position: relative;
    max-width: 100%;
    margin-left: auto;
    margin-right: auto;
  }

  .embla__viewport {
    overflow: hidden;
  }

  .embla__container {
    display: flex;
    touch-action: pan-y pinch-zoom;
    margin-left: calc(1rem * -1);
  }

  .embla__slide {
    flex: 0 0 20%;
    min-width: 0;
    padding-left: 1rem;
  }

  .team-member {
    flex-shrink: 0;
    width: 100%;
    padding: 1rem;
  }

  @media (max-width: 640px) {
    .embla__slide {
      flex: 0 0 50%;
    }
  }

  @media (min-width: 641px) and (max-width: 768px) {
    .embla__slide {
      flex: 0 0 33.333%;
    }
  }

  @media (min-width: 769px) and (max-width: 1024px) {
    .embla__slide {
      flex: 0 0 25%;
    }
  }

  @media (min-width: 1025px) {
    .embla__slide {
      flex: 0 0 20%;
    }
  }

  .embla__controls {
    display: flex;
    justify-content: center;
    gap: 1.2rem;
    margin-top: 0.5rem;
  }

  .embla__buttons {
    display: flex;
    gap: 0.6rem;
    align-items: center;
  }

  .embla__button {
    -webkit-tap-highlight-color: rgba(var(--text-high-contrast-rgb-value), 0.5);
    -webkit-appearance: none;
    appearance: none;
    background-color: transparent;
    touch-action: manipulation;
    display: flex;
    text-decoration: none;
    cursor: pointer;
    border: 0;
    padding: 0;
    margin: 0;
    width: 2.5rem;
    height: 2.5rem;
    z-index: 1;
    border-radius: 50%;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease-in-out;
    @apply text-primary-600 shadow-[inset_0_0_0_0.2rem] shadow-primary-600;
  }

  .embla__button:disabled {
    @apply text-primary-300 shadow-primary-300 cursor-not-allowed;
  }

  .embla__button:not(:disabled):hover,
  .embla__button:not(:disabled):focus-visible {
    @apply text-white bg-primary-600 outline-none;
  }

  .embla__button:not(:disabled):active {
    @apply text-white bg-primary-700;
    transform: scale(0.96);
  }

  .embla__button__icon {
    width: 70%;
    height: 70%;
  }
</style>

<script>
  import EmblaCarousel from "embla-carousel";

  const CAROUSEL_CONFIG = {
    AUTOPLAY_INTERVAL: 5000,
    AUTOPLAY_DELAY: 1000,
    DRAG_THRESHOLD: 5,
  };

  const initEmblaCarousel = (rootElement: HTMLElement) => {
    const emblaNode = rootElement.querySelector(
      ".embla__viewport"
    ) as HTMLElement;
    const prevBtnNode = rootElement.querySelector(
      ".embla__button--prev"
    ) as HTMLButtonElement;
    const nextBtnNode = rootElement.querySelector(
      ".embla__button--next"
    ) as HTMLButtonElement;

    if (!emblaNode) return;

    if (rootElement.hasAttribute("data-embla-initialized")) {
      return;
    }
    rootElement.setAttribute("data-embla-initialized", "true");

    const embla = EmblaCarousel(emblaNode, {
      loop: true,
      containScroll: "trimSnaps",
      slidesToScroll: 1,
      align: "start",
      dragFree: false,
      dragThreshold: CAROUSEL_CONFIG.DRAG_THRESHOLD,
      skipSnaps: false,
    });

    let autoplayInterval: ReturnType<typeof setInterval> | null = null;
    let isAutoplayPaused = false;

    const updateButtonStates = () => {
      if (prevBtnNode) prevBtnNode.disabled = !embla.canScrollPrev();
      if (nextBtnNode) nextBtnNode.disabled = !embla.canScrollNext();
    };

    const startAutoplay = () => {
      if (autoplayInterval || isAutoplayPaused) return;

      autoplayInterval = setInterval(() => {
        embla.scrollNext();
      }, CAROUSEL_CONFIG.AUTOPLAY_INTERVAL);
    };

    const stopAutoplay = () => {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
        autoplayInterval = null;
      }
    };

    const pauseAutoplay = () => {
      isAutoplayPaused = true;
      stopAutoplay();
    };

    const resumeAutoplay = () => {
      isAutoplayPaused = false;
      startAutoplay();
    };

    // Add button event listeners
    if (prevBtnNode) {
      prevBtnNode.addEventListener("click", () => {
        embla.scrollPrev();
        pauseAutoplay();
        setTimeout(resumeAutoplay, CAROUSEL_CONFIG.AUTOPLAY_INTERVAL);
        // Remove focus to reset button state
        prevBtnNode.blur();
      });
    }

    if (nextBtnNode) {
      nextBtnNode.addEventListener("click", () => {
        embla.scrollNext();
        pauseAutoplay();
        setTimeout(resumeAutoplay, CAROUSEL_CONFIG.AUTOPLAY_INTERVAL);
        // Remove focus to reset button state
        nextBtnNode.blur();
      });
    }

    // Update button states on select
    embla.on("select", updateButtonStates);
    embla.on("init", updateButtonStates);

    setTimeout(startAutoplay, CAROUSEL_CONFIG.AUTOPLAY_DELAY);

    emblaNode.addEventListener("mouseenter", pauseAutoplay);
    emblaNode.addEventListener("mouseleave", resumeAutoplay);

    return () => {
      stopAutoplay();
      embla.destroy();
      rootElement.removeAttribute("data-embla-initialized");
    };
  };

  const initAllCarousels = () => {
    const carouselElements = document.querySelectorAll("[data-embla]");
    carouselElements.forEach((element) => {
      initEmblaCarousel(element as HTMLElement);
    });
  };

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initAllCarousels);
  } else {
    initAllCarousels();
  }

  document.addEventListener("astro:page-load", initAllCarousels);
</script>
