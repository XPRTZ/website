---
import { fetchData, type Article } from "@xprtz/cms";
import BlogCard from "./BlogCard.astro";
const site = import.meta.env.PUBLIC_SITE || "no-site-found";

const articles = await fetchData<Array<Article>>({
  endpoint: "articles",
  wrappedByKey: "data",
  query: {
    "sort[0]": "date:desc",
    "filters[site][$eq]": site,
    "fields[0]": "title",
    "fields[1]": "slug",
    "fields[2]": "date",
    "populate[authors][fields][0]": "firstname",
    "populate[authors][fields][1]": "lastname",
    "populate[authors][populate][avatar][fields][0]": "url",
    "populate[image][fields][0]": "url",
    "pagination[page]": "1",
    "pagination[pageSize]": "3",
    status: "published",
  },
});

interface BlogListingProps {
  __component: "ui.artikelen-overzicht";
  id: number;
  title: string;
  description: string;
}

const { title, description } = Astro.props as BlogListingProps;
---

<div class="mx-auto mt-32 max-w-7xl px-6 lg:px-8">
  <div class="mx-auto max-w-2xl lg:mx-0 lg:max-w-none">
    <h2
      class="text-balance text-4xl font-semibold tracking-tight text-primary-800 sm:text-5xl"
    >
      {title}
    </h2>
    <p class="mt-6 text-lg/8 text-gray-600">
      {description}
    </p>
  </div>
  <div
    class="mx-auto mt-16 grid max-w-2xl auto-rows-fr grid-cols-1 gap-8 lg:mx-0 lg:max-w-none lg:grid-cols-3"
  >
    {
      articles.map((article) => (
        <BlogCard key={article.documentId} article={article} />
      ))
    }
  </div>
  <div class="mt-8 grid grid-flow-col justify-items-start gap-x-6">
    <a href="/artikelen" class="text-sm font-semibold leading-6 text-primary-900">
      Lees meer <span aria-hidden="true"> &rarr;</span>
    </a>
  </div>
</div>
