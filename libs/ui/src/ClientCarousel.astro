---
import { type LogoCloud } from "@xprtz/cms";
const logoCloud = Astro.props as LogoCloud;
const site = import.meta.env.PUBLIC_IMAGES_URL;

const clientsPerSlide = 5;
const totalClients = logoCloud.klant.length;
const totalSlides = Math.max(1, Math.ceil(totalClients / clientsPerSlide));
const slidesClients = Array.from({ length: totalSlides }).map(
  (_, slideIndex) => {
    const startIndex = slideIndex * clientsPerSlide;
    const clients = [];

    for (let i = 0; i < clientsPerSlide; i++) {
      const clientIndex = startIndex + i;
      if (clientIndex >= totalClients) break;
      clients.push(logoCloud.klant[clientIndex]);
    }

    return clients;
  }
);
---

<div class="mx-auto mt-32 max-w-7xl px-6 lg:px-8">
  <div class="mx-auto max-w-2xl lg:mx-0">
    <h2
      class="text-pretty text-4xl font-semibold tracking-tight text-primary-800 sm:text-5xl"
    >
      {logoCloud.title}
    </h2>
  </div>

  <div
    class="carousel-container mt-20 relative overflow-hidden"
    aria-roledescription="carousel"
    aria-label="klanten"
  >
    <div class="client-carousel-track flex transition-transform duration-500">
      {
        slidesClients.map((clients, slideIndex) => (
          <div
            class="client-carousel-slide flex-none w-full flex flex-nowrap justify-center gap-2 md:gap-4"
            role="group"
            aria-roledescription="slide"
            aria-label={`Slide ${slideIndex + 1} of ${totalSlides}`}
          >
            {clients.map((klant) => (
              <div class="client-carousel-item text-center px-2">
                <img
                  class="col-span-2 max-h-12 w-full object-contain lg:col-span-1"
                  src={`${site}${klant.image.url}`}
                  alt={klant.image.alternateText}
                  width="158"
                  height="48"
                />
              </div>
            ))}
          </div>
        ))
      }
    </div>
  </div>
</div>

<style>
  .carousel-container {
    max-width: 100%;
    position: relative;
  }

  .client-carousel-item {
    display: flex;
    width: 100%;
    transition: transform 0.5s ease-in-out;
  }

  .client-carousel-slide {
    min-width: 100%;
    display: flex;
    flex-wrap: nowrap;
    overflow-x: hidden;
  }

  .client-carousel-item {
    transition: opacity 0.3s ease;
    flex-shrink: 0;
    max-width: 100%;
  }

  @media (min-width: 320px) and (max-width: 640px) {
    .client-carousel-item {
      width: 75%; /* 3 items per row on medium-small screens */
    }
  }

  @media (min-width: 641px) and (max-width: 768px) {
    .client-carousel-item {
      width: 33.333%; /* 3 items per row on medium-small screens */
    }
  }

  @media (min-width: 769px) and (max-width: 1024px) {
    .client-carousel-item {
      width: 20%; /* 5 items per row on medium screens */
    }
  }

  @media (min-width: 1025px) {
    .client-carousel-item {
      width: 20%; /* 5 items per row on large screens */
    }
  }
</style>

<script>
  // Initialize carousel functionality
  const initCarousel = () => {
    const track = document.querySelector(".client-carousel-track");
    const slides = document.querySelectorAll(".client-carousel-slide");

    if (!track || !slides.length) return;

    let currentSlide = 0;
    const totalSlides = slides.length;

    // Function to go to a specific slide
    const goToSlide = (index) => {
      console.log(`Going to slide ${index} of ${totalSlides}`);
      if (index < 0) index = totalSlides - 1;
      if (index >= totalSlides) index = 0;

      track.style.transform = `translateX(-${index * 100}%)`;

      // Update ARIA attributes for slides
      slides.forEach((slide, i) => {
        slide.setAttribute("aria-hidden", i === index ? "false" : "true");
      });

      currentSlide = index;
    };

    // Initialize first slide
    goToSlide(0);

    // Auto-rotate carousel
    let interval = setInterval(() => {
      goToSlide(currentSlide + 1);
    }, 5000); // Change slide every 5 seconds

    // Function to reset auto-rotation
    const resetAutoRotation = () => {
      clearInterval(interval);
      interval = setInterval(() => {
        goToSlide(currentSlide + 1);
      }, 5000);
    };
  };

  // Run on initial load
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initCarousel);
  } else {
    initCarousel();
  }

  // Also run when Astro updates the page
  document.addEventListener("astro:page-load", initCarousel);
</script>
