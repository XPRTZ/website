---
import type { GetStaticPaths } from "astro";
import { fetchData, type Article, type Page as PageType } from "@xprtz/cms";
import Layout from "../../../layouts/layout.astro";
import {
  Container,
  Blogs,
  SEOTools,
  generateWebsiteStructuredData,
} from "@xprtz/ui";

interface PageData {
  data: Article[];
  start: Number;
  end: Number;
  size: Number;
  total: Number;
  currentPage: Number;
  lastPage: Number;
  url: Url;
}

interface Url {
  current: string;
  next: string;
  prev: string;
  first: string;
  last: string;
}

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const site = import.meta.env.PUBLIC_SITE || "no-site-found";

  const articles = await fetchData<Array<Article>>({
    endpoint: "articles",
    wrappedByKey: "data",
    query: {
      "sort[0]": "date:desc",
      "filters[site][$eq]": site,
      "populate[authors][fields]": "*",
      "populate[authors][populate][avatar][fields][0]=url": "url",
      "populate[image][fields][0]": "url",
      "populate[tags][fields][0]": "title",
      status: "published",
    },
  });

  return paginate(articles, { pageSize: 10 });
};

const site = import.meta.env.PUBLIC_SITE || "no-site-found";
const siteUrl = Astro.site?.toString() || "https://xprtz.net";

const articlesPages = await fetchData<Array<PageType>>({
  endpoint: "pages",
  wrappedByKey: "data",
  query: {
    "filters[site][$eq]": site,
    "filters[slug][$eq]": "artikelen",
    status: "published",
  },
});

const { page } = Astro.props as { page: PageData };
const articlesPage = articlesPages[0];

// Generate pagination URLs
const prevPageUrl = page.url.prev ? `${siteUrl}${page.url.prev}` : undefined;
const nextPageUrl = page.url.next ? `${siteUrl}${page.url.next}` : undefined;

// Generate structured data for the blog listing page
const structuredData = generateWebsiteStructuredData({
  name: `${articlesPage.title_website} - Pagina ${page.currentPage}`,
  url: `${siteUrl}${page.url.current}`,
  description: `${articlesPage.description} - Pagina ${page.currentPage} van ${page.lastPage}`,
});

// Generate breadcrumbs
const breadcrumbs = [
  { name: "Home", url: siteUrl },
  { name: articlesPage.title_website, url: `${siteUrl}/artikelen/` },
  ...(Number(page.currentPage) > 1
    ? [
        {
          name: `Pagina ${page.currentPage}`,
          url: `${siteUrl}${page.url.current}`,
        },
      ]
    : []),
];

// Create page-specific title and description
const pageTitle =
  Number(page.currentPage) > 1
    ? `${articlesPage.title_website} - Pagina ${page.currentPage}`
    : articlesPage.title_website;

const pageDescription =
  Number(page.currentPage) > 1
    ? `${articlesPage.description} - Pagina ${page.currentPage} van ${page.lastPage}`
    : articlesPage.description;
---

<Layout
  title={pageTitle}
  description={pageDescription}
  type="website"
  seoData={{
    structuredData,
    keywords: [
      "articles",
      "blog posts",
      ".NET development",
      "software engineering",
      "programming tutorials",
    ],
  }}
>
  <SEOTools
    prevPage={prevPageUrl}
    nextPage={nextPageUrl}
    breadcrumbs={breadcrumbs}
  />

  <Container>
    <svg
      class="absolute inset-x-0 top-0 -z-10 h-[64rem] w-full stroke-gray-200 [mask-image:radial-gradient(32rem_32rem_at_center,white,transparent)]"
      aria-hidden="true"
    >
      <defs>
        <pattern
          id="1f932ae7-37de-4c0a-a8b0-a6e3b4d44b84"
          width={200}
          height={200}
          x="50%"
          y={-1}
          patternUnits="userSpaceOnUse"
        >
          <path d="M.5 200V.5H200" fill="none"></path>
        </pattern>
      </defs>
      <svg x="50%" y={-1} class="overflow-visible fill-gray-50">
        <path
          d="M-200 0h201v201h-201Z M600 0h201v201h-201Z M-400 600h201v201h-201Z M200 800h201v201h-201Z"
          stroke-width={0}></path>
      </svg>
      <rect
        width="100%"
        height="100%"
        stroke-width={0}
        fill="url(#1f932ae7-37de-4c0a-a8b0-a6e3b4d44b84)"></rect>
    </svg>

    <div
      class="absolute left-1/2 right-0 top-0 -z-10 -ml-24 transform-gpu overflow-hidden blur-3xl lg:ml-24 xl:ml-48"
      aria-hidden="true"
    >
      <div
        class="aspect-[801/1036] w-[50.0625rem] bg-gradient-to-tr from-primary-100 to-primary-800 opacity-30"
        style="clip-path: polygon(63.1% 29.5%, 100% 17.1%, 76.6% 3%, 48.4% 0%, 44.6% 4.7%, 54.5% 25.3%, 59.8% 49%, 55.2% 57.8%, 44.4% 57.2%, 27.8% 47.9%, 35.1% 81.5%, 0% 97.7%, 39.2% 100%, 35.2% 81.4%, 97.2% 52.8%, 63.1% 29.5%);"
      >
      </div>
    </div>
    <div class="overflow-hidden">
      <div class="mx-auto max-w-7xl px-6 pt-36 sm:pt-60 lg:px-8 lg:pt-32">
        <div
          class="mx-auto max-w-2xl gap-x-14 lg:mx-0 lg:max-w-none lg:items-center"
        >
          <p class="text-base/7 font-semibold text-primary-600">
            {articlesPage.tagline}
          </p>
          <h1
            class="mt-2 text-pretty text-4xl font-semibold tracking-tight text-primary-800 sm:text-5xl"
          >
            {pageTitle}
          </h1>
          <p class="mt-6 text-xl/8">{pageDescription}</p>
          <div class="mt-10 max-w-7xl text-base/7">
            <Blogs page={page} />
          </div>
        </div>
      </div>
    </div>
  </Container>
</Layout>
